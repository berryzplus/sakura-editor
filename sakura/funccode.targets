<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup Label="FuncCode">
    <HeaderMakeSourceDir>$([MSBuild]::NormalizePath('$(MSBuildThisFileDirectory)', '..\HeaderMake\'))</HeaderMakeSourceDir>
    <HeaderMakeBuildDir>$([MSBuild]::NormalizePath('$(MSBuildThisFileDirectory)', '..\build\HeaderMake\'))</HeaderMakeBuildDir>
    <HeaderMake>$(HeaderMakeBuildDir)HeaderMake.exe</HeaderMake>
    <FuncCodeDefine>$(IntDir)Funccode_define.h</FuncCodeDefine>
    <FuncCodeEnum>$(IntDir)Funccode_enum.h</FuncCodeEnum>
  </PropertyGroup>
  <Target Name="MakeHeaderMakeBuildDir" Condition="!Exists('$(HeaderMakeBuildDir)')">
    <MakeDir Directories="$(HeaderMakeBuildDir)" />
  </Target>
  <Target Name="HeaderMake"
      Inputs="$(HeaderMakeSourceDir)CMakeLists.txt"
      Outputs="$(HeaderMake)"
      DependsOnTargets="MakeHeaderMakeBuildDir">
    <PropertyGroup>
      <VsVersion>$([System.Double]::Parse('$(VisualStudioVersion)'))</VsVersion>
    </PropertyGroup>
    <Exec Command="vswhere -find **\CMake\bin\cmake.exe -version [$(VsVersion),$([MSBuild]::Add($(VsVersion), 1))) > $(TLogLocation)cmake.path" Condition="!Exists('$(TLogLocation)cmake.path')" />
    <Exec Command="vswhere -find **\CMake\Ninja\ninja.exe -version [$(VsVersion),$([MSBuild]::Add($(VsVersion), 1))) > $(TLogLocation)ninja.path" Condition="!Exists('$(TLogLocation)ninja.path')" />
    <Exec Command="vswhere -find **\bin\Hostx64\$(PlatformTarget)\cl.exe -version [$(VsVersion),$([MSBuild]::Add($(VsVersion), 1))) > $(TLogLocation)cl.path" Condition="!Exists('$(TLogLocation)cl.path')"/>
    <ReadLinesFromFile File="$(TLogLocation)cmake.path" Condition="'@(CmdCMake)' == ''">
      <Output TaskParameter="Lines" ItemName="CmdCMake"/>
    </ReadLinesFromFile>
    <ReadLinesFromFile File="$(TLogLocation)ninja.path" Condition="'@(CmdNinja)' == ''">
      <Output TaskParameter="Lines" ItemName="CmdNinja"/>
    </ReadLinesFromFile>
    <ReadLinesFromFile File="$(TLogLocation)cl.path" Condition="'@(CmdCl)' == ''">
      <Output TaskParameter="Lines" ItemName="CmdCl"/>
    </ReadLinesFromFile>
    <Exec Command="&quot;@(CmdCMake)&quot; -G Ninja &quot;-DCMAKE_MAKE_PROGRAM=@(CmdNinja->Replace('\', '/'))&quot; &quot;-DCMAKE_C_COMPILER=@(CmdCl->Replace('\', '/'))&quot; &quot;-DCMAKE_CXX_COMPILER=@(CmdCl->Replace('\', '/'))&quot; $(HeaderMakeSourceDir)" ConsoleToMSBuild="true" WorkingDirectory="$(HeaderMakeBuildDir)" />
    <Exec Command="&quot;@(CmdCMake)&quot; --build ." ConsoleToMSBuild="true" WorkingDirectory="$(HeaderMakeBuildDir)" />
  </Target>
  <Target Name="CleanHeaderMake" BeforeTargets="CoreClean">
    <RemoveDir Directories="$(HeaderMakeBuildDir)" />
  </Target>
  <Target Name="_WriteFuncCodeDefineRcTlogs">
    <ItemGroup>
      <_FuncCodeDefineReadTlog Include="^$(FuncCodeDefine);%(FuncCodeRes.FullPath)" 
         Condition="'%(FuncCodeRes.ExcludedFromBuild)' != 'true'"/>
      <_FuncCodeDefineWriteTlog Include="^%(FuncCodeRes.FullPath);$(FuncCodeDefine)" 
         Condition="'%(FuncCodeRes.ExcludedFromBuild)' != 'true'"/>
    </ItemGroup>
    <WriteLinesToFile
      Condition="'@(_FuncCodeDefineReadTlog)' != ''"
      File="$(TLogLocation)rc.read.1u.tlog"
      Lines="@(_FuncCodeDefineReadTlog->MetaData('Identity')->ToUpperInvariant());"
      Overwrite="true"
      Encoding="Unicode"/>
    <WriteLinesToFile
      Condition="'@(_FuncCodeDefineWriteTlog)' != ''"
      File="$(TLogLocation)rc.write.1u.tlog"
      Lines="@(_FuncCodeDefineWriteTlog->MetaData('Identity')->ToUpperInvariant());"
      Overwrite="true"
      Encoding="Unicode"/>
    <ItemGroup>
      <_FuncCodeDefineReadTlog  Remove="@(_FuncCodeDefineReadTlog)" />
      <_FuncCodeDefineWriteTlog Remove="@(_FuncCodeDefineWriteTlog)" />
    </ItemGroup>
  </Target>
  <Target Name="FuncCodeDefine"
      Inputs="@(FuncCodeRes);$(HeaderMake);$(MSBuildThisFilePath)"
      Outputs="$(FuncCodeDefine)"
      DependsOnTargets="HeaderMake;_WriteFuncCodeDefineRcTlogs"
      BeforeTargets="ResourceCompile">
    <Exec Command="$(HeaderMake) -in=@(FuncCodeRes) -out=$(FuncCodeDefine) -mode=define" />
  </Target>
  <Target Name="_WriteFuncCodeEnumClTlogs">
    <ItemGroup>
      <_FuncCodeEnumReadTlog Include="^$(FuncCodeEnum);%(FuncCodeRes.FullPath)" 
         Condition="'%(FuncCodeRes.ExcludedFromBuild)' != 'true'"/>
      <_FuncCodeEnumWriteTlog Include="^%(FuncCodeRes.FullPath);$(FuncCodeEnum)" 
         Condition="'%(FuncCodeRes.ExcludedFromBuild)' != 'true'"/>
    </ItemGroup>
    <WriteLinesToFile
      Condition="'@(_FuncCodeEnumReadTlog)' != ''"
      File="$(TLogLocation)CL.read.1u.tlog"
      Lines="@(_FuncCodeEnumReadTlog->MetaData('Identity')->ToUpperInvariant());"
      Overwrite="true"
      Encoding="Unicode"/>
    <WriteLinesToFile
      Condition="'@(_FuncCodeEnumWriteTlog)' != ''"
      File="$(TLogLocation)CL.write.1u.tlog"
      Lines="@(_FuncCodeEnumWriteTlog->MetaData('Identity')->ToUpperInvariant());"
      Overwrite="true"
      Encoding="Unicode"/>
    <ItemGroup>
      <_FuncCodeEnumReadTlog  Remove="@(_FuncCodeEnumReadTlog)" />
      <_FuncCodeEnumWriteTlog Remove="@(_FuncCodeEnumWriteTlog)" />
    </ItemGroup>
  </Target>
  <Target Name="FuncCodeEnum"
      Inputs="@(FuncCodeRes);$(HeaderMake);$(MSBuildThisFilePath)"
      Outputs="$(FuncCodeEnum)"
      DependsOnTargets="HeaderMake;_WriteFuncCodeEnumClTlogs"
      BeforeTargets="ClCompile">
    <Exec Command="$(HeaderMake) -in=@(FuncCodeRes) -out=$(FuncCodeEnum) -mode=enum -enum=EFunctionCode" />
  </Target>
</Project>